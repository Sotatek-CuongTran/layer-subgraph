// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Rebalancer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Rebalancer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Rebalancer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Rebalancer", id.toString(), this);
  }

  static load(id: string): Rebalancer | null {
    return store.get("Rebalancer", id) as Rebalancer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenA(): string {
    let value = this.get("tokenA");
    return value.toString();
  }

  set tokenA(value: string) {
    this.set("tokenA", Value.fromString(value));
  }

  get tokenB(): string {
    let value = this.get("tokenB");
    return value.toString();
  }

  set tokenB(value: string) {
    this.set("tokenB", Value.fromString(value));
  }

  get fee(): i32 {
    let value = this.get("fee");
    return value.toI32();
  }

  set fee(value: i32) {
    this.set("fee", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get rebalancer(): string {
    let value = this.get("rebalancer");
    return value.toString();
  }

  set rebalancer(value: string) {
    this.set("rebalancer", Value.fromString(value));
  }
}

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Factory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Factory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Factory", id.toString(), this);
  }

  static load(id: string): Factory | null {
    return store.get("Factory", id) as Factory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get test(): string {
    let value = this.get("test");
    return value.toString();
  }

  set test(value: string) {
    this.set("test", Value.fromString(value));
  }

  get rebalancer_count(): i32 {
    let value = this.get("rebalancer_count");
    return value.toI32();
  }

  set rebalancer_count(value: i32) {
    this.set("rebalancer_count", Value.fromI32(value));
  }
}
